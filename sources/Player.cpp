#include <iostream>
#include "Player.hpp"



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool coup::Player::iStilNotDead() const {
    bool ans = this -> isPlaying;
    return ans;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void coup::Player::dead(){
    bool ans = false;
    this -> isPlaying = ans;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void coup::Player::coup(Player &p){
    size_t x = 0;
    if (this->coin >= couPrice && p.iStilNotDead()){
        x++;
        p.dead();
        this->coin = this->coin - couPrice;
        this->game.endThisTurn();
    }
    else{
        x++;
        throw "Player already dead or you poor";
    }
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void coup::Player::aliveagain(){
    bool ans = true;
    this->isPlaying = ans;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string coup::Player::role() const {
    return this->roleName; 
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void coup::Player::income(){
    string s = this->name;
    size_t x = 0;
    if (this->game.turn() == s){
        this->coin = this->coin + incomeBonus;
        this->game.endThisTurn();
    }
    else{
        throw "not your turn";
    }
    x++;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void coup::Player::foreign_aid(){
    size_t nameis = 0;
    if (this -> coin < maxCapacity && this -> game.turn() == this -> name){
        this -> game.insertToBlockableList(this, "Duke");
        this -> coin = this -> coin + foreignAidBonus;
        nameis++;
        this -> game.endThisTurn();
    }
    else{
        nameis++;
        throw "This is not your turn or you have atleast 10 coins!\n";
    }
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int coup::Player::coins() const {
    return this -> coin; 
}